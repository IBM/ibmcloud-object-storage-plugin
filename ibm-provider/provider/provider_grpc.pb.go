// Code generated by protoc-gen-go-grpc-client. DO NOT EDIT.

package provider

import (
	"context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc-client package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

type IBMProviderClientFactory interface {

	// NewIBMProviderClient method creates a new NewIBMProviderClient instance
	NewIBMProviderClient(cc grpc.ClientConnInterface) IBMProviderClient
}

// IBMProviderClient is the client API for IBMProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IBMProviderClient interface {
	GetProviderType(ctx context.Context, in *ProviderTypeRequest, opts ...grpc.CallOption) (*ProviderTypeReply, error)
	GetVPCSvcEndpoint(ctx context.Context, in *VPCSvcEndpointRequest, opts ...grpc.CallOption) (*VPCSvcEndpointReply, error)
}

type IBMProviderClntFactory struct{}

type IBMProviderClnt struct {
	cc grpc.ClientConnInterface
}

// NewIBMProviderClient method creates a new NewIBMProviderClient instance
func (c *IBMProviderClntFactory) NewIBMProviderClient(cc grpc.ClientConnInterface) IBMProviderClient {
	return &IBMProviderClnt{cc}
}

func (c *IBMProviderClnt) GetProviderType(
	ctx context.Context, in *ProviderTypeRequest,
	opts ...grpc.CallOption,
) (*ProviderTypeReply, error) {
	out := new(ProviderTypeReply)
	err := c.cc.Invoke(ctx, "/provider.IBMProvider/GetProviderType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *IBMProviderClnt) GetVPCSvcEndpoint(
	ctx context.Context, in *VPCSvcEndpointRequest,
	opts ...grpc.CallOption,
) (*VPCSvcEndpointReply, error) {
	out := new(VPCSvcEndpointReply)
	err := c.cc.Invoke(ctx, "/provider.IBMProvider/GetVPCSvcEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IBMProviderServer is the server API for IBMProvider service.
// All implementations must embed UnimplementedIBMProviderServer
// for forward compatibility
type IBMProviderServer interface {
	GetProviderType(context.Context, *ProviderTypeRequest) (*ProviderTypeReply, error)
	GetVPCSvcEndpoint(context.Context, *VPCSvcEndpointRequest) (*VPCSvcEndpointReply, error)
	mustEmbedUnimplementedIBMProviderServer()
}

// UnimplementedIBMProviderServer must be embedded to have forward compatible implementations.
type UnimplementedIBMProviderServer struct {
}

func (*UnimplementedIBMProviderServer) GetProviderType(
	context.Context, *ProviderTypeRequest,
) (*ProviderTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderType not implemented")
}
func (*UnimplementedIBMProviderServer) GetVPCSvcEndpoint(
	context.Context, *VPCSvcEndpointRequest,
) (*VPCSvcEndpointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVPCSvcEndpoint not implemented")
}
func (*UnimplementedIBMProviderServer) mustEmbedUnimplementedIBMProviderServer() {}

func RegisterIBMProviderServer(s *grpc.Server, srv IBMProviderServer) {
	s.RegisterService(&_IBMProvider_serviceDesc, srv)
}

func _IBMProvider_GetProviderType_Handler(
	srv interface{}, ctx context.Context,
	dec func(interface{}) error,
	interceptor grpc.UnaryServerInterceptor,
) (interface{}, error) {
	in := new(ProviderTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IBMProviderServer).GetProviderType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.IBMProvider/GetProviderType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IBMProviderServer).GetProviderType(ctx, req.(*ProviderTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IBMProvider_GetVPCSvcEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCSvcEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IBMProviderServer).GetVPCSvcEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.IBMProvider/GetVPCSvcEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IBMProviderServer).GetVPCSvcEndpoint(ctx, req.(*VPCSvcEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IBMProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provider.IBMProvider",
	HandlerType: (*IBMProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProviderType",
			Handler:    _IBMProvider_GetProviderType_Handler,
		},
		{
			MethodName: "GetVPCSvcEndpoint",
			Handler:    _IBMProvider_GetVPCSvcEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provider/provider.proto",
}
